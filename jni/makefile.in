#
# @package_copyright@
#
# @configure_input@
#

.POSIX :

.SUFFIXES :
A = .@LIBEXT@
C = .class
J = .java
L = .so
O = .@OBJEXT@
.SUFFIXES : .c $J .i $O $C $A $L .jar

LIBNAME		= libpost4jni$L
MAIN		= post4.jni.Post4

top_srcdir 	= @top_srcdir@
abs_srcdir 	= @abs_srcdir@

prefix 		= @prefix@
exec_prefix 	= @exec_prefix@
bindir 		= @bindir@
libdir 		= @libdir@/post4

PROG		= ${top_srcdir}/src/post4$E
POST4_PATH	= .:${top_srcdir}/src:${top_srcdir}/examples

# Override from the command-line, eg. make DBG='-O0 -g'
DBG		:= @DBG@

CC		= @CC@
CC_E		= @CC_E@
CC_O		= @CC_O@
CPPFLAGS	= @CPPFLAGS@
CWARNINGS	= -Wall -Wextra
CFLAGS		= -O2 -std=gnu17 @JNI_CFLAGS@ ${CWARNINGS} -I${top_srcdir}/src ${DBG}
LDFLAGS		= @LDFLAGS@
JFLAGS		= -Xlint:deprecation @JFLAGS@
LIBS		= @LIBS@

BUILT		:= `date +'%a, %d %b %Y %H:%M:%S %z'`
CPU		:= `uname -p`
OS		:= `uname -s`

#######################################################################

#%$O : %.c
.c$O :
	$(CC) $(CFLAGS) -fPIC -c $<

#%$E : %.c
.c$E :
	$(CC) $(CFLAGS) $(LDFLAGS) $(CC_E)$*$E $< $(LIBS)

#%$E : %$O
$O$E :
	$(LD) $(LDFLAGS) $(CC_E)$*$E $*$O $(LIBS)

.c.i:
	${CC} -E ${CFLAGS} $*.c >$*.i

.java.class :
	javac ${JFLAGS} -cp ../.. $?

#######################################################################

.MAIN : build

all: build

clean: title
	-rm *.i *$O *.class *.core *.log *$L *$A *.jar

clobber distclean: clean
	-rm makefile

build: title Post4.jar

title :
	@echo
	@echo '***************************************************************'
	@echo '==> '${abs_srcdir}
	@echo '***************************************************************'
	@echo

install: Post4.jar
	install -p -o root -g 0 -d ${libdir}
	install -p -o root -g 0 *.p4 ${libdir}
	install -p -o root -g 0 Post4.jar ${libdir}

# See also
# https://stackoverflow.com/questions/2937406/how-to-bundle-a-native-library-and-a-jni-library-inside-a-jar
Post4.jar: ${LIBNAME} Post4Exception$C Post4Options$C Post4Stacks$C Post4$C Post4.mf ${top_srcdir}/src/post4.p4
	mkdir -p ./post4/jni ./lib
	cp -p *.p4 ${LIBNAME} ./lib
	cp -p ${top_srcdir}/src/post4.p4 ./lib
	cd ${top_srcdir}/examples && cp -p ansiterm.p4 ed.p4 rand.p4 fizzbuzz.p4 life.p4 life1d.p4 wumpus.p4 ${top_srcdir}/jni/lib
	cp -p *.class ./post4/jni
	jar -v -c -m Post4.mf -f $@ post4/ lib/
	rm -rf post4 lib

${LIBNAME}: Post4$O ../src/libpost4$A
	${CC} ${CFLAGS} -shared -o $@ Post4$O ../src/libpost4$A ${LIBS}

../src/libpost4$A : ../src/*.h ../src/*.c
	cd ../src; ${MAKE} libpost4$A

run: build Post4.jar
	POST4_PATH="${POST4_PATH}" java -Djava.library.path="$${POST4_PATH}" -cp ../.. ${MAIN}

test: build Post4.jar
	POST4_PATH="${POST4_PATH}" java -Djava.library.path="$${POST4_PATH}" -cp ../.. ${MAIN} ../test/units.p4

testjar: Post4.jar
	POST4_PATH="${POST4_PATH}" java -Djava.library.path="$${POST4_PATH}" -jar Post4.jar

testbye: build
	echo bye | POST4_PATH="${POST4_PATH}" java -Djava.library.path="$${POST4_PATH}" -cp ../.. ${MAIN}

cygtest: build
	cp ${LIBNAME} post4jni.dll
	POST4_PATH="${POST4_PATH}"; java -Djava.library.path=".;..\\src" -cp ../.. ${MAIN} ../test/units.p4

# GH-71 Should cleanly terminate with an error.
test_badpath: ${PROG}
	@printf "== %s ==  Bad POST4_PATH\n" $@
	! POST4_PATH="/invalid" java -Djava.library.path="$${POST4_PATH}" -cp ../.. ${MAIN}
	@echo "-OK-"

