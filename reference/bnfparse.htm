<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<title>A BNF Parser in Forth</title>
</head><body>

                  <center><h1> A BNF PARSER IN FORTH</h1>
<small>(This article first appeared in ACM SigFORTH 
Newsletter vol. 2 no. 2)</small>
</center>

<p></p><center>                    Bradford J. Rodriguez<br>
                    T-Recursive Technology<br>
                     115 First St. #105<br>
                   Collingwood, Ontario L9Y 4W3 Canada<br>
bj@forth.org
</center><p></p>
<h2>   1.  Introduction</h2>

      <p> Backus-Naur Form (BNF) is a notation for the formal
       description of programming languages.  While most
       commonly used to specify the syntax of "conventional"
       programming languages such as Pascal and C, BNF is
       also of value in command language interpreters and
       other language processing.</p>

<p>       This paper describes a one-screen Forth extension
       which transforms BNF expressions to executable Forth
       words.  This gives Forth a capability equivalent to
       YACC or TMG, to produce a working parser from a BNF
       language description.</p>

<h2>    2. BNF Expressions</h2>

<p>       BNF expressions or productions are written as
       follows:</p>

<p></p><pre><tt>            production  ::=  term ... term    (alternate #1)
                          |  term ... term    (alternate #2)
                          |  term ... term    (alternate #3)</tt></pre><p></p>

<p>       This example indicates that the given production may
       be formed in one of three ways.  Each alternative is
       the concatenation of a series of terms.  A term in a
       production may be either another production, called a
       nonterminal, or a fundamental token, called a
       terminal.</p>

<p>       A production may use itself recursively in its
       definition.  For example, an unsigned integer can be
       defined with the productions</p>

<tt>           &lt;digit&gt; ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9<br>
           &lt;number&gt; ::= &lt;digit&gt; | &lt;digit&gt; &lt;number&gt;</tt>

<p>       which says that a number is either a single digit, or
       a single digit followed by another number (of one or
       more digits).</p>

<p>       We will use the conventions of a vertical bar | to
       seperate alternatives, and angle brackets <name> to
       designate the name of a production.  Unadorned ASCII
       characters are terminals (the fundamental tokens).</name></p>

<h2>   3.  A Simple Solution through Conditional Execution</h2>

<p>       The logic of succession and alternation can be
       implemented in two "conditional execution" operators,
       &amp;&amp; and ||.  These correspond exactly to the "logical
       connectives" of the same names in the C language
       (although their use here was actually inspired by the
       Unix "find" command).  They are defined:</p>

<tt>            : ||   IF R&gt; DROP 1 THEN ;       ( exit on true)<br>
            : &amp;&amp;   0= IF R&gt; DROP 0 THEN ;    ( exit on false)
</tt>
<p>       ||  given a true value on the stack,  exits the colon
       definition immediately with true on the stack.  This
       can be used to string together alternatives: the
       first alternative which is satisfied (returns true)
       will stop evaluation of further alternatives.</p>

<p>       &amp;&amp;  given a false value on the stack, exits the colon
       definition immediately with false on the stack.  This
       is the "concatenation" operator: the first term which
       fails (returns false) stops evaluation and causes the
       entire sequence to fail.
</p>
<p>       We assume that each "token" (terminal) is represented
       by a Forth word which scans the input stream and
       returns a success flag.  Productions (nonterminals)
       which are built with such tokens, ||, and &amp;&amp;, are
       guaranteed to return a success flag.
</p>
<p>       So, assuming the "token" words '0' thru '9' have been
       defined, the previous example becomes:</p>

<p></p><pre><tt>            : &lt;DIGIT&gt;   '0' || '1' || '2' || '3' || '4'
                      || '5' || '6' || '7' || '8' || '9' ;
            : &lt;NUMBER1&gt;   &lt;DIGIT&gt; &amp;&amp; &lt;NUMBER&gt; ;
            : &lt;NUMBER&gt;   &lt;DIGIT&gt; || &lt;NUMBER1&gt; ;
</tt></pre><p></p>
<p>       Neglecting the problem of forward referencing for the
       moment, this example illustrates three limitations:</p>

<p>       a) we need an explicit operator for concatenation,
          unlike BNF.</p>

<p>       b) &amp;&amp; and || have equal precedence, which means we
          can't mix &amp;&amp; and || in the same Forth word and get
          the equivalent BNF expression.  We needed to split
          the production &lt;NUMBER&gt; into two words.</p>

<p>       c) we have made no provision for restoring the scan
          pointer if a BNF production fails.</p>

<p>       We will address these next.</p>

<h2>   4. A Better Solution</h2>

<p>      Several improvements can be made to this "rough" BNF
      parser, to remove its limitations and improve its
      "cosmetics."
</p>
<p>      a) Concatenation by juxtaposition. We can cause the
         action of &amp;&amp; to be performed "invisibly" by enforcing
         this rule for all terms (terminals and nonterminals):
         Each term examines the stack on entry. if false, the
         word exits immediately with false on the stack.
         Otherwise, it parses and returns a success value.</p>

  <p>       To illustrate this: consider a series of terms</p>

<p><tt>              &lt;ONE&gt; &lt;TWO&gt; &lt;THREE&gt; &lt;FOUR&gt;</tt>
</p>
<p>         Let<tt> &lt;ONE&gt;</tt> execute normally and return "false." The
        <tt> &lt;TWO&gt;</tt> is entered, and exits immediately, doing
         nothing.  Likewise, <tt>&lt;THREE&gt;</tt> and <tt>&lt;FOUR&gt;</tt> do nothing.
         Thus the remainder of the expression is skipped,
         without the need for a return-stack exit.</p>

<p>         The implementation of this will be described shortly.</p>

<p>      b) Precedence. By eliminating the &amp;&amp; operator in this
         manner, we make it possible to mix concatenation and
         alternation in a single expression.  A failed
         concatenation will "skip" only as far as the next
         operator.  So, our previous example becomes:</p>

<p><tt>             : &lt;NUMBER&gt;  &lt;DIGIT&gt; || &lt;DIGIT&gt; &lt;NUMBER&gt; ;</tt></p>

<p>      c) Backtracking. If a token fails to match the input
         stream, it does not advance the scan pointer.
         Likewise, if a BNF production fails, it must restore
         the scan pointer to the "starting point" where the
         production was attempted, since that is the point at
         which alternatives must be tried.  We therefore
         enforce this rule for all terminals and nonterminals:
         Each term saves the scan pointer on entry.  If the
         term fails, the scan pointer is restored; otherwise,
         the saved value is discarded.
</p>
<p>         We will later find it useful to "backtrack" an output
         pointer, as well.
</p>
<p>      d) Success as a variable. An examination of the stack
         contents during parsing reveals the surprising fact
         that, at any time, there is only one success flag on
         the stack! (This is because flags placed on the
         stack are immediately "consumed.") We can use a
         variable,<tt> SUCCESS</tt>, for the parser success flags, and
         thereby simplify the manipulations necessary to use
         the stack for other data.  All BNF productions
         accept, and return, a truth value in <tt>SUCCESS</tt>.</p>

<h2>   5. Implementation</h2>

<p>       The final BNF parser word set is given on screen 3.
       Three words implement the essential logic:</p>

<p>         <tt> &lt;BNF</tt> is used at the beginning of a production.  If
                <tt>SUCCESS</tt> is false, it causes an immediate
                exit.  Otherwise, it saves the scan pointer
                on the return stack.</p>

<p>         <tt> |</tt>   separates alternatives.  If <tt>SUCCESS</tt> is true,
                it causes an immediate exit and discards
                the saved scan pointer.  Otherwise, it
                restores the scan position from the saved
                pointer.</p>

<p>          <tt>BNF&gt;</tt> is used at the end of a production.  If
                <tt>SUCCESS</tt> is false, it restores the scan
                position from the saved pointer.  In any
                case, it removes the saved pointer from the
                return stack.</p>

<p>      <tt> &lt;BNF</tt> and <tt>BNF&gt;</tt> are "run-time" logic, compiled by the
       words <tt>BNF:</tt> and<tt> ;BNF</tt>, respectively.</p>

<p>         <tt> BNF: name</tt>     starts the definition of the BNF
                          production name.</p>

<p>         <tt> ;BNF</tt>           ends a BNF definition.</p>

<p>       Finally, there are four words which simplify the
       definition of token words and other terminals:
</p>
<p>          <tt>@TOKEN</tt>   fetch the current token from the input.
</p>
<p>         <tt> +TOKEN</tt>   advance the input scan pointer.</p>

<p>         <tt> =TOKEN</tt>   compare the value on top of stack to the
                     current token, following the rules for
                      BNF parsing words.</p>

<p>         <tt> nn TOKEN name</tt>  builds a "terminal" name, with the
                           ASCII value nn.</p>

<p>       The parser uses the fig-Forth IN as the input
       pointer, and the dictionary pointer DP as the output
       pointer.  These choices were made strictly for
       convenience; there is no implied connection with the
       Forth compiler.</p>

<h2>   6. Examples and Usage</h2>

<p>       The syntax of a BNF definition in Forth resembles the
       "traditional" BNF syntax:</p>

<p>Traditional:  <tt> prod ::=   term term | term term</tt><br>
       Forth:        <tt> BNF: prod  term term | term term ;BNF</tt></p>

<p>       Screen 6 is a simple pattern recognition problem, to
       identify text having balanced left and right
       parentheses.  Several aspects of the parser are
       illustrated by this example:</p>

<p>       a) Three tokens are defined on line 4. To avoid name
          conflicts, they are named with enclosing quotes.
         <tt> &lt;EOL&gt;</tt> matches the end-of-line character in the
          fig-Forth Terminal Input Buffer.</p>

<p>       b) Line 9 shows a recursive production, <tt>&lt;S&gt;</tt>. During
          the definition of a production, its name is
          automatically unSMUDGEd.</p>

<p>       c) Line 9 also shows a null alternative. This is
          often encountered in BNF.  The null alternative
          parses no tokens, and is always satisfied.</p>

<p>       d) Not all parsing words need be written as BNF
          productions.  Line 6 is Forth code to parse any
          ASCII character, excluding parentheses and nulls.
          Note that <tt>BNF:</tt> and<tt> ;BNF</tt> are used, not to create a
          production, but as an easy way to create a
          conditionally-executing (per <tt>SUCCESS</tt>) Forth word.</p>

<p>       e) Line 11 shows how to invoke the parser: <tt>SUCCESS</tt> is
          initialized to "true," and the "topmost" BNF
          production is executed. on its return, <tt>SUCCESS</tt> is
          examined to determine the final result.</p>

<p>       f) Line 11 also shows how end-of-input is indicated
          to the BNF parser: the sequence is defined as the
          desired BNF production, followed by end-of-line.
</p>
<p>       Screens 7 and 8 parse algebraic expressions with
       precedence.  This grammar is directly from [AH077],
       p. 138.  The use of the productions <tt>&lt;T'&gt;</tt> and <tt>&lt;E'&gt;</tt> to
       avoid the problem of left-recursion is described on
       p. 178 of that book. Note also:</p>

<p>       a) <tt>&lt;DIGIT&gt;</tt> is defined "the hard way." It would be
          better to do this with a Forth word.</p>

<p>       b) <tt>&lt;ELEMENT&gt;</tt> requires a forward reference to
          <tt>&lt;EXPRESSION&gt;</tt>.  We must patch this reference
          manually.</p>

<p>      Screens 9 through 11 show how this algebraic parser
      can be modified to perform code generation,
      coincident with the parsing process.  Briefly: each
      alternative of a BNF production includes Forth code
      to compile the output which would result from that
      alternative.  If the alternative succeeds, that
      output is left in the dictionary.  If it fails, the
      dictionary pointer is "backtracked" to remove that
      output.  Thus, as the parser works its way, top-down,
      through the parse tree, it is constantly producing
      and discarding trial output.
</p>
<p>      This example produces Forth source code for the
      algebraic expression.</p>

<p>      a)  The word<tt> ,"</tt> appends a text string to the output.</p>

<p>      b)  We have chosen to output each digit of a number as
          it is parsed.<tt> (DIGIT)</tt> is a subsidiary word to
          parse a valid digit. <tt>&lt;DIGIT&gt;</tt> picks up the
          character from the input stream before it is
          parsed, and then appends it to the output.  If it
          was not a digit, <tt>SUCCESS</tt> will be false and<tt> ;BNF</tt>
          will discard the appended character.</p>

<p>          If we needed to compile numbers in binary,
         <tt> &lt;NUMBER&gt;</tt> would have to do the output. <tt>&lt;NUMBER&gt;</tt>
          could start by placing a zero on the stack as the
          accumulator. <tt>&lt;DIGIT&gt;</tt> could augment this value for
          each digit.  Then, at the end of <tt>&lt;NUMBER&gt;</tt>, the
          binary value on the stack could be output.</p>

<p>      c)  After every complete number, we need a space. We
          could factor <tt>&lt;NUMBER&gt;</tt> into two words, like
          <tt>&lt;DIGIT&gt;</tt>.  But since <tt>&lt;NUMBER&gt;</tt> only appears once, in
          <tt>&lt;ELEMENT&gt;</tt>, we append the space there.</p>

<p>      d)  In <tt>&lt;PRIMARY&gt;</tt>, <tt>MINUS</tt> is appended after the argument
          is parsed.  In <tt>&lt;FACTOR&gt;</tt>, <tt>POWER</tt> is appended after
          its two arguments are parsed.<tt> &lt;T'&gt;</tt> appends * or /
          after the two arguments, and likewise <tt>&lt;E'&gt;</tt> appends
          + or -.</p>

<p>          In all of these cases, an argument may be a number
          or a sub-expression.  If the latter, the entire
          code to evaluate the sub-expression is output
          before the postfix operator is output. (Try it.
          It works.)</p>

<p>      e) <tt>PARSE</tt> has been modified to <tt>TYPE </tt>the output from
          the parser, and then to restore the dictionary
          pointer.</p>

<h2>   7. Cautions</h2>

<p>       This parser is susceptible to the Two Classic
       Mistakes of BNF expressions.  Both of these cautions
       can be illustrated with the production<tt> &lt;NUMBER&gt;</tt>:</p>

<p>          <tt> BNF: &lt;NUMBER&gt;    &lt;DIGIT&gt; &lt;NUMBER&gt; | &lt;DIGIT&gt; ;BNF</tt></p>

<p>       a) Order your alternatives carefully.  If <tt>&lt;NUMBER&gt;</tt>
          were written</p>

<p>           <tt>BNF: &lt;NUMBER&gt;    &lt;DIGIT&gt; | &lt;DIGIT&gt; &lt;NUMBER&gt; ;BNF</tt></p>

<p>          then all numbers would be parsed as one and only
          one digit!  This is because alternative #1 --
          which is a subset of alternative #2 -- is always
          tested first.  In general, the alternative which
          is the subset or the "easier to-satisfy" should be
          tested last.</p>

<p>       b) Avoid "left-recursion." If <tt>&lt;NUMBER&gt;</tt> were written</p>

<p>            <tt>BNF: &lt;NUMBER&gt;   &lt;NUMBER&gt; &lt;DIGIT&gt; | &lt;DIGIT&gt; ;BNF</tt>
</p>
<p>          then you will have an infinite recursive loop of
          <tt>&lt;NUMBER&gt;</tt> calling <tt>&lt;NUMBER&gt;</tt>!  To avoid this problem,
          do not make the first term in any alternative a
          recursive reference to the production being
          defined. (This rule is somewhat simplified; for a
          more detailed discussion of this problem, refer to
          [AH077], pp. 177 to 179.)</p>

<h2>   8.  Comparison to "traditional" work</h2>

<p>       In the jargon of compiler writers, this parser is a
       "top-down parser with backtracking." Another such
       parser, from ye olden days of Unix, was TMG.
       Top-down parsers are among the most flexible of
       parsers; this is especially so in this
       implementation, which allows Forth code to be
       intermixed with BNF expressions.</p>

<p>       Top-down parsers are also notoriously inefficient.
       Predictive parsers, which look ahead in the input
       stream, are better.  Bottom-up parsers, which move
       directly from state to state in the parse tree
       according to the input tokens, are better still.
       Such a parser, YACC (a table-driven LR parser), has
       entirely supplanted TMG in the Unix community.</p>

<p>       Still, the minimal call-and-return overhead of Forth
       should alleviate the speed problem somewhat, and the
       simplicity and flexibility of the BNF Parser may make
       it the parser of choice for many applications.</p>

<h2>   9. Applications and Variations</h2>

<p>      <b>Compilers.</b>  The obvious application of a BNF parser
      is in writing translators for other languages. (This
      should certainly strenghten Forth's claim as a
      language to write other languages.)</p>

<p>      <b>Command interpreters.</b>  Complex applications may have
      an operator interface sufficiently complex to merit a
      BNF description.  For example, this parser has been
      used in an experimental lighting control system; the
      command language occupied 30 screens of BNF.</p>

<p>     <b> Pattern recognition.</b>  Aho &amp; Ullman [AH077] note that
      any construct which can be described by a regular
      expression, can also be described by a context-free
      grammar, and thus in BNF. [AH077] identifies some
      uses of regular expressions for pattern recognition
      problems; such problems could also be addressed by
      this parser.
</p>
<p>      An extension of these parsing techniques has been
      used to impement a Snobol4-style pattern matcher
      [ROD89a].</p>

<p>     <b> Goal directed evaluation.</b>  The process of searching
      the parse tree for a successful result is essentially
      one of "goal-directed evaluation." Many problems can
      be solved by goal-directed techniques.</p>

<p>      For example, a variation of this parser has been used
      to construct an expert system [ROD89b].</p>

<h2>  10. References</h2>

<p>      [AH077] Alfred Aho and Jeffrey Ullman, Principles of
          Compiler Design, Addison-Wesley, Reading, MA
          (1977), 604 pp.
</p>
<p>      [ROD89a] B. Rodriguez, "Pattern Matching in Forth,"
          presented at the 1989 FORML Conference, 14 pp.
</p>

<h2>Program Listing</h2>
<pre><tt>
                                                              Scr #       3
 0 \ BNF Parser                                (c) 1988 B. J. Rodriguez
 1 0 VARIABLE SUCCESS
 2 : &lt;BNF   SUCCESS @ IF  R&gt; IN @ &gt;R DP @ &gt;R  &gt;R
 3    ELSE  R&gt; DROP  THEN ;
 4 : BNF&gt;   SUCCESS @ IF  R&gt;  R&gt; R&gt; 2DROP   &gt;R
 5    ELSE  R&gt;  R&gt; DP ! R&gt; IN !  &gt;R THEN ;
 6 : |    SUCCESS @ IF  R&gt; R&gt; R&gt; 2DROP DROP
 7    ELSE  R&gt; R&gt; R&gt; 2DUP &gt;R &gt;R IN ! DP !  1 SUCCESS !  &gt;R THEN ;
 8 : BNF:   [COMPILE] : SMUDGE COMPILE &lt;BNF ; IMMEDIATE
 9 : ;BNF   COMPILE BNF&gt; SMUDGE [COMPILE] ; ; IMMEDIATE
10
11 : @TOKEN ( - n)   IN @ TIB @ + C@ ;
12 : +TOKEN ( f)    IF 1 IN +! THEN ;
13 : =TOKEN ( n)    SUCCESS @ IF @TOKEN =  DUP SUCCESS ! +TOKEN
14    ELSE DROP THEN ;
15 : TOKEN ( n)    &lt;BUILDS C, DOES&gt; ( a)  C@ =TOKEN ;

                                                              Scr#        4
 0 \ BNF Parser - 8086 assembler version       (c) 1988 B. J. Rodriguez
 1 0 VARIABLE SUCCESS
 2 CODE &lt;BNF    -1 # SUCCESS #) TEST, NE IF,      \ if passing,
 3       4 # RP SUB,    0FDFE # W MOV, ( U ptr)   \     checkpoint
 4       ' IN @ [W]  AX MOV, AX 2 [RP] MOV,       \     and continue
 5       ' DP @ [W]  AX MOV, AX 0 [RP] MOV,
 6    ELSE, 0 [RP] IP MOV,  RP INC,  RP INC,      \  else, exit now!
 7    THEN, NEXT
 8
 9 CODE BNF&gt;    -1 # SUCCESS #) TEST, EQ IF,      \  if failing,
10        0FDFE # W MOV, ( U ptr)                  \     backtrack to
11        0 [RP] AX MOV, AX ' DP @ [W] MOV,        \     checkpoint
12        2 [RP] AX MOV, AX ' IN @ [W] MOV,
13     THEN, 4 # RP ADD, NEXT                      \  discard checkpoint
14                                                 \     and continue
15

                                                              Scr#        5
 0 \ BNF Parser - 8086 assembler version       (c) 1988 B. J. Rodriguez
 1 CODE |   -1 # SUCCESS #) TEST, NE IF,        \ if passing,
 2       4 # RP ADD,                            \   discard checkpoint
 3       0 [RP] IP MOV, RP INC, RP INC,         \   and exit now
 4    ELSE, 0FDFE # W MOV,                      \ else, backtrack,
 5       0 [RP] AX MOV,    AX ' DP @ [W] MOV,   \   leaving checkpoint
 6       2 [RP] AX MOV,    AX ' IN @ [W] MOV,   \   stacked, and
 7       SUCCESS #) INC,                        \   set true for next
 8    THEN, NEXT                                \   alternate
 9
10
11
12
13
14
15

                                                              Scr #       6
 0 \ BNF Parser Example #1 - pattern recog.             18 9 88 bjr 19:41
 1 \ from Aho &amp; Ullman, Principles of Compiler Design, p.137
 2 \ this grammar recognizes strings having balanced parentheses
 3
 4 HEX    28 TOKEN '('      29 TOKEN ')'      0 TOKEN &lt;EOL&gt;
 5
 6 BNF: &lt;CHAR&gt;     @TOKEN DUP 2A 7F WITHIN SWAP 1 27 WITHIN OR
 7    DUP SUCCESS ! +TOKEN ;BNF
 8
 9 BNF: &lt;S&gt;       '(' &lt;S&gt; ')' &lt;S&gt;   |   &lt;CHAR&gt; &lt;S&gt;   |   ;BNF
10
11 : PARSE     1 SUCCESS !    &lt;S&gt; &lt;EOL&gt;
12   CR SUCCESS @ IF ." Successful " ELSE ." Failed " THEN ;
13
14
15

                                                              Scr#        7
 0 \  BNF Parser Example    #2  - infix notation        18 9 88 bjr 14:54
 1 HEX    2B TOKEN   '+'    2D  TOKEN '-'     2A  TOKEN  '*'     2F TOKEN '/'
 2        28 TOKEN   '('    29  TOKEN ')'     5E  TOKEN  '^'
 3        30 TOKEN   '0'    31  TOKEN '1'     32  TOKEN  '2'     33 TOKEN '3'
 4        34 TOKEN   '4'    35  TOKEN '5'     36  TOKEN  '6'     37 TOKEN '7'
 5        38 TOKEN   '8'    39  TOKEN '9'       0 TOKEN  &lt;EOL&gt;
 6
 7 BNF: &lt;DIGIT&gt;      '0'  | '1' | '2' |  '3' | '4' | '5' | '6' | '7'
 8     |  '8' | '9' ;BNF
 9 BNF: &lt;NUMBER&gt;    &lt;DIGIT&gt; &lt;NUMBER&gt;    |     &lt;DIGIT&gt; ;BNF
10
11
12
13
14
15

                                                              Scr#        8
 0 \ BNF Parser Example     #2 - infix notation         18 9 88 bjr 15:30
 1 \ from Aho &amp; Ullman,     Principles of Compiler Design, pp.135,178
 2 : [HERE]     HERE 0 ,   -2 CSP +!  ;    IMMEDIATE
 3
 4 BNF:   &lt;ELEMENT&gt;     '(' [HERE]  ')'  |    &lt;NUMBER&gt; ;BNF
 5 BNF:   &lt;PRIMARY&gt;     '-' &lt;PRIMARY&gt;    |   &lt;ELEMENT&gt; ;BNF
 6 BNF:   &lt;FACTOR&gt;    &lt;PRIMARY&gt; '^' &lt;FACTOR&gt; | &lt;PRIMARY&gt; ;BNF
 7 BNF:   &lt;T'&gt;     '*' &lt;FACTOR&gt; &lt;T'&gt; | '/' &lt;FACTOR&gt; &lt;T'&gt; ;BNF
 8 BNF:   &lt;TERM&gt;    &lt;FACTOR&gt; &lt;T'&gt; ;BNF
 9 BNF:   &lt;E'&gt;     '+' &lt;TERM&gt; &lt;E'&gt; | '-' &lt;TERM&gt; &lt;E'&gt;    ;BNF
10 BNF:  &lt;EXPRESSION&gt;      &lt;TERM&gt; &lt;E'&gt; ;BNF
11 ' &lt;EXPRESSION&gt; CFA SWAP !      \ fix the recursion in &lt;ELEMENT&gt;
12
13 : PARSE     1 SUCCESS !     &lt;EXPRESSION&gt; &lt;EOL&gt;
14    CR SUCCESS @ IF  ." Successful " ELSE ." Failed " THEN ;
15

                                                              Scr #       9
 0  \ BNF  Example #3      code generation               18 9 88 bjr 21:57
 1 HEX    2B TOKEN   '+'    2D  TOKEN '-'     2A  TOKEN  '*'     2F TOKEN'/'
 2        28 TOKEN   '('    29  TOKEN ')'     5E  TOKEN  '^'
 3        30 TOKEN   '0'    31  TOKEN '1'     32  TOKEN  '2'     33 TOKEN '3'
 4        34 TOKEN   '4'    35  TOKEN '5'     36  TOKEN  '6'     37 TOKEN '7'
 5        38 TOKEN   '8'    39  TOKEN '9'       0 TOKEN  &lt;EOL&gt;
 6
 7 BNF: {DIGIT}      '0'  | '1' | '2' |  '3' | '4' | '5' | '6' | '7'
 8     |  '8' | '9' ;BNF
 9 BNF: &lt;DIGIT&gt;       @TOKEN {DIGIT} C, ;BNF
10
11 BNF: &lt;NUMBER&gt;      &lt;DIGIT&gt; &lt;NUMBER&gt;    |    &lt;DIGIT&gt; ;BNF
12
13 : (,")    R COUNT DUP 1+ R&gt; + &gt;R       HERE SWAP DUP ALLOT CMOVE ;
14 : ,"    COMPILE (,") 22 WORD HERE       C@ 1+ ALLOT  ;    IMMEDIATE
15

                                                              Scr#       10
 0 \  BNF Example #3       code generation               18 9 88 bjr 21:57
 1 :  [HERE]     HERE 0  ,   -2 CSP +!  ;    IMMEDIATE
 2
 3 BNF: &lt;ELEMENT&gt;     '('   [HERE]  ')'
 4                 |   &lt;NUMBER&gt; BL C, ;BNF
 5 BNF: &lt;PRIMARY&gt;      '-'  &lt;PRIMARY&gt;  ," MINUS "
 6                 |    &lt;ELEMENT&gt; ;BNF
 7 BNF: &lt;FACTOR&gt;      &lt;PRIMARY&gt; '^' &lt;FACTOR&gt;      ," POWER "
 8                 |  &lt;PRIMARY&gt; ;BNF
 9 BNF: &lt;T'&gt;      '*' &lt;FACTOR&gt;     ," * "    &lt;T'&gt;
10             |  '/' &lt;FACTOR&gt;     ," / "    &lt;T'&gt;
11             |  ;BNF
12 BNF: &lt;TERM&gt;     &lt;FACTOR&gt; &lt;T'&gt;       ;BNF
13 BNF: &lt;E'&gt;      '+' &lt;TERM&gt;    ." + "   &lt;E'&gt;
14             |  '-' &lt;TERM&gt;    ." - "   &lt;E'&gt;
15             |  ;BNF

                                                              Scr#       11
 0  \ BNF Example #3 - code generation                   18 9 88 bjr 21:57
 1  BNF: &lt;EXPRESSION&gt;       &lt;TERM&gt; &lt;E'&gt; ;BNF
 2  ' &lt;EXPRESSION&gt; CFA SWAP             \ fix the recursion in &lt;ELEMENT&gt;
 3
 4  : PARSE    HERE 1 SUCCESS !         &lt;EXPRESSION&gt; &lt;EOL&gt;
 5     CR SUCCESS @ IF HERE OVER - DUP MINUS ALLOT TYPE
 6     ELSE ." Failed" THEN ;
 7
 8
 9
10
11
12
13
14
15
</tt></pre>
</body></html>