#
# @package_copyright@
#
# @configure_input@
#

.POSIX :

.SUFFIXES :
A = .@LIBEXT@
O = .@OBJEXT@
E = @EXEEXT@
.SUFFIXES : .c .i $O $A

#
# Paths for supporting headers and libraries.
#
top_srcdir 	= @top_srcdir@
abs_srcdir 	= @abs_srcdir@

prefix 		= @prefix@
exec_prefix 	= @exec_prefix@
bindir 		= @bindir@
libdir 		= @libdir@/post4

PROG		= ${top_srcdir}/src/post4$E
LIBNAME		= ${top_srcdir}/src/libpost4$A
POST4_PATH	= POST4_PATH='.:${top_srcdir}/src:${top_srcdir}/examples'

# Override from the command-line, eg. make DBG='-O0 -g' or make DBG='-fno-ident -flto'
DBG		= @DBG@

CC		= @CC@
CC_E		= @CC_E@
CC_O		= @CC_O@
CPPFLAGS	= @CPPFLAGS@

# Note do not use -pedantic as it generates way too many warnings.
CWARNINGS	= -Wall -Wextra -Wno-char-subscripts -Wno-unused-label \
		-Wno-unused-const-variable -Wno-missing-field-initializers

CFLAGS		= -Os -std=gnu17 -funsigned-char ${CPPFLAGS} ${CWARNINGS} ${DBG}
LDFLAGS		= @LDFLAGS@
LIBS		= @LIBS@

BUILT		:= `date +'%a, %d %b %Y %H:%M:%S %z'`
COMMIT		:= $$(git describe --tags)

#######################################################################

#%$O : %.c
.c$O :
	$(CC) $(CFLAGS) -fPIC -c $<

#%$E : %.c
.c$E :
	$(CC) $(CFLAGS) $(LDFLAGS) $(CC_E)$@ $< $(LIBS)

#%$E : %$O
$O$E :
	$(LD) $(LDFLAGS) $(CC_E)$@ $*$O $(LIBS)

.c.i:
	${CC} -E ${CFLAGS} $*.c >$*.i

#######################################################################

.MAIN : build

GEN	:= config.h build.h
CHDR	:= aline.h ansiterm.h post4.h
CSRC	:= post4.c hooks.c aline.c
OBJS	:= post4$O hooks$O aline$O

all: build

build: title post4$E

clean : title
	-rm -f *.o *.obj *.i *.gch *.map *.tds *.TR2 *.stackdump *.core *.log
	-rm -f a.out$E aline$E post4$E libpost4$A typescript

clobber distclean: clean
	-rm -f ${GEN} config.h.in makefile

title :
	@echo
	@echo '***************************************************************'
	@echo '==> '${abs_srcdir}
	@echo '***************************************************************'
	@echo

install: build
	install -p -o root -g 0 -d ${libdir}
	install -p -o root -g 0 post4.p4 ${libdir}
	install -p -o root -g 0 post4$E ${bindir}

uninstall:
	rm -f ${bindir}/post4 ${libdir}/post4.p4

aline$E : ansiterm.h aline.h aline.c
	${CC} ${CFLAGS} -DALINE_TEST -o $@ aline.c

aline$O : config.h ansiterm.h aline.h aline.c

build.h : config.h ${CHDR} ${CSRC} main.c
	printf '#define P4_BUILT "%s"\n#define P4_COMMIT "%s"\n' "${BUILT}" "${COMMIT}" >build.h

hooks$O : config.h post4.h hooks.c

post4$O : build.h
	${CC} ${CFLAGS} -fPIC -c post4.c

libpost4$A : ${OBJS}
	ar rcs $@ ${OBJS}

post4$E : build.h main.c
	${CC} ${CFLAGS} ${LDFLAGS} -o $@ main.c ${CSRC} ${LIBS}

test tests: post4$E
	cd ../test && ${MAKE} $@

valgrind: post4$E
	echo BYE | valgrind --leak-check=full ${PROG}
	valgrind --leak-check=full --show-leak-kinds=all ${PROG} ../test/units.p4
	valgrind --leak-check=full ${PROG} ../examples/life1d.p4

strip:
	${MAKE} DBG='-DNDEBUG ${DBG}' clean build
	@strip -s ${PROG}
	@ls -l post4*
